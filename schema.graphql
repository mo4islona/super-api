type Parachain @entity {
  id: ID!
  name: String
  crowdloans: [Crowdloan]! @derivedFrom(field: "parachain")
}

type Crowdloan @entity {
  id: ID!
  cap: BigInt!
  firstPeriod: BigInt!
  lastPeriod: BigInt!
  end: BigInt!
  contributors: [String!]
  raised: BigInt!
  parachain: Parachain!
  chainName: String! @index
  blockNumber: BigInt
}

interface ItemBase {
  id: ID!
  date: DateTime
  blockNumber: BigInt
  extrinisicHash: String
  chainName: String 
}

type Contribution implements ItemBase @entity {
  id: ID!
  date: DateTime!
  blockNumber: BigInt!
  extrinisicHash: String
  chainName: String! @index
  crowdloan: Crowdloan!
  success: Boolean!
  account: String! @index
  amount: BigInt!
}

type Transfer implements ItemBase @entity {
  id: ID!
  blockNumber: BigInt
  extrinisicHash: String
  to: String @index
  from: String @index
  amount: BigInt
  success: Boolean
  name: String
  date: DateTime
  chainName: String @index
}

type Reward implements ItemBase @entity  {
  id: ID!
  date: DateTime
  blockNumber: BigInt
  extrinisicHash: String
  chainName: String @index
  account: String @index
  amount: BigInt
  name: String
  era: Int
  validator: String
}