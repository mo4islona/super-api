type Parachain @entity {
  id: ID!
  name: String
  crowdloans: [Crowdloan]! @derivedFrom(field: "parachain")
}

type Crowdloan @entity {
  id: ID!
  cap: BigInt
  firstPeriod: BigInt
  lastPeriod: BigInt
  end: BigInt
  contributors: [String]
  raised: BigInt
  parachain: Parachain
}

interface ItemBase {
  id: ID!
  date: DateTime
  blockHash: String
  blockNumber: BigInt
  extrinisicHash: String
  chainName: String
  success: Boolean
}

type Contribution @entity implements ItemBase{
  id: ID!
  date: DateTime
  blockHash: String
  blockNumber: BigInt
  extrinisicHash: String
  chainName: String
  crowdloan: Crowdloan
  success: Boolean
  account: String @index
  amount: BigInt
}


type Transfer @entity implements ItemBase{
  id: ID!
  blockNumber: BigInt
  extrinisicHash: String
  to: String @index
  from: String @index
  amount: BigInt
  success: Boolean
  name: String
  date: DateTime
}

# Old stuff needs to be remade or removed
interface EventBase {
  id: ID!
  date: DateTime!
  blockHash: String!
  blockNumber: BigInt!
  extrinisicHash: String
  chainName: String!
  event: String!
}

type BalanceEvent implements EventBase @entity {
  id: ID!
  date: DateTime!
  blockHash: String!
  blockNumber: BigInt!
  extrinisicHash: String
  event: String!
  from: String @index
  to: String @index
  account: String @index
  amount: BigInt
  balanceStatus: String
  free: BigInt
  reserved: BigInt
  chainName: String! @index
}

type StakingEvent implements EventBase @entity {
  id: ID!
  date: DateTime!
  blockHash: String!
  blockNumber: BigInt!
  extrinisicHash: String
  event: String!
  chainName: String! @index
  account: String! @index
  amount: BigInt!
}