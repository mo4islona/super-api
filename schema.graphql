type Account @entity {
  id: ID!
  totalStake: BigInt
  totalReward: BigInt
  totalSlash: BigInt
  transfers: [Transfer!] @derivedFrom(field: "account")
  contributions: [Contribution!] @derivedFrom(field: "account")
  rewards: [Reward!] @derivedFrom(field: "account")
  slashes: [Slash!] @derivedFrom(field: "account")
  stakes: [Stake!] @derivedFrom(field: "account")
}

type Parachain @entity {
  id: ID!
  name: String
  crowdloans: [Crowdloan]! @derivedFrom(field: "parachain")
}

enum CrowdloanStatus {
  Created
  Won
  Dissolved
}

type Contributor {
  id: ID!
  amount: BigInt!
}

type Crowdloan @entity {
  id: ID!
  cap: BigInt!
  firstPeriod: BigInt!
  lastPeriod: BigInt!
  end: BigInt!
  contributors: [Contributor!]
  raised: BigInt!
  parachain: Parachain!
  chainName: String! @index
  blockNumber: BigInt
  status: CrowdloanStatus
}

interface Item {
  date: DateTime
  blockNumber: BigInt
  extrinsicHash: String
  chainName: String
  account: Account
  amount: BigInt
}

interface HasTotal {
  total: BigInt
}

interface CanFail {
  success: Boolean
}

type Contribution implements Item & CanFail @entity {
  id: ID!
  chainName: String! @index
  date: DateTime
  blockNumber: BigInt
  extrinsicHash: String @index
  crowdloan: Crowdloan
  success: Boolean @index
  account: Account
  amount: BigInt
}

type Transfer implements Item & CanFail @entity {
  id: ID!
  chainName: String @index
  date: DateTime
  blockNumber: BigInt
  extrinsicHash: String @index
  to: Account
  from: Account
  account: Account
  amount: BigInt
  success: Boolean @index
  name: String
}

type Reward implements Item & HasTotal @entity  {
  id: ID!
  chainName: String @index
  date: DateTime
  blockNumber: BigInt
  extrinsicHash: String @index
  account: Account
  amount: BigInt
  era: Int
  validator: String
  total: BigInt
  name: String
}

type Slash implements Item & HasTotal @entity  {
  id: ID!
  chainName: String @index
  date: DateTime
  blockNumber: BigInt
  extrinsicHash: String @index
  account: Account
  amount: BigInt
  total: BigInt
  name: String
}

type Stake implements Item & HasTotal & CanFail @entity  {
  id: ID!
  chainName: String @index
  date: DateTime
  blockNumber: BigInt
  extrinsicHash: String @index
  account: Account
  amount: BigInt
  total: BigInt
  success: Boolean @index
  name: String
}
